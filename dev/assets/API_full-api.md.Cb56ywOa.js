import{_ as i,c as s,o as e,a6 as a}from"./chunks/framework.DVND9aYn.js";const u=JSON.parse('{"title":"Complete API","description":"","frontmatter":{},"headers":[],"relativePath":"API/full-api.md","filePath":"API/full-api.md","lastUpdated":null}'),t={name:"API/full-api.md"},l=a(`<h1 id="Complete-API" tabindex="-1">Complete API <a class="header-anchor" href="#Complete-API" aria-label="Permalink to &quot;Complete API {#Complete-API}&quot;">​</a></h1><p>Full list of all documented functions/structs.</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.DiffusionMap" href="#Manyfold.DiffusionMap">#</a> <b><u>Manyfold.DiffusionMap</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DiffusionMap{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Struct that stores various informations about the diffusion map.</p><p><strong>Fields</strong></p><ul><li><p><code>d</code> : number of dimensions</p></li><li><p><code>t</code> : timesteps of diffusion process</p></li><li><p><code>α</code> : exponent that handles density of data</p></li><li><p><code>k</code> : kernel function, that determines law to gain KernelMatrix</p></li><li><p><code>K_m</code> : KernelKatrix (kernelfunction applied on Data)</p></li><li><p><code>K</code> : modified Matrix to detrmine diffusion map coordinates</p></li><li><p><code>Λs</code> : Diagonal matrix of descending eigenvalues/singularvalues of <code>K</code></p></li><li><p><code>Vs</code> : eigenvectors column wise</p></li><li><p><code>Map</code> : DiffusionMap coordinates (column wise)</p></li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.GeometricHarmonics" href="#Manyfold.GeometricHarmonics">#</a> <b><u>Manyfold.GeometricHarmonics</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GeometricHarmonics{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Is an object that allows us to jump between the ambient and latent space. From the &quot;restriction&quot; standpoint this is an alternative to the natural Nyström extension. From the &quot;lifting&quot; standpoint this is an alternative to the natural k-nearest neighbors approach. For details look up <a href="https://doi.org/10.1016/j.acha.2005.07.005" target="_blank" rel="noreferrer">Coifman</a> and <a href="https://doi.org/10.1016/j.jcp.2023.112072" target="_blank" rel="noreferrer">Kevrekedis</a>. Direction for predictions: X –&gt; Y</p><p><strong>Fields</strong></p><ul><li><p><code>d</code> : dimensions of the eigenspace (usually one has to take into account many)</p></li><li><p><code>X_train</code> : training data from the domain</p></li><li><p><code>Y_train</code> : training data of image(<code>X_train</code>)</p></li><li><p><code>k</code> : kernel function that is used to create kernelmatrices</p></li><li><p><code>K</code> : kernelmatrix</p></li><li><p><code>Λs</code> : eigenvalues of <code>K</code> in diagonal matrix (descending order)</p></li><li><p><code>Vs</code> : eigenvectors in column wise order corresponding to <code>Λs</code></p></li><li><p><code>Map</code> : <code>Y_train</code> projections on geometric harmonics</p></li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.MultiScaleGeometricHarmonics" href="#Manyfold.MultiScaleGeometricHarmonics">#</a> <b><u>Manyfold.MultiScaleGeometricHarmonics</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MultiScaleGeometricHarmonics</span></span></code></pre></div><p>WORK IN PROGRESS Introduction of multiscale GeometricHarmonics. General idea is to incorparate multiple length scales / band widths ε into our kernel. Therefore we get better approximations for the extension of the domain.</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.GaussianKernel-Tuple{T} where T&lt;:Real" href="#Manyfold.GaussianKernel-Tuple{T} where T&lt;:Real">#</a> <b><u>Manyfold.GaussianKernel</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GaussianKernel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(epsilon)</span></span></code></pre></div><p>Creates KernelFunctions.Kernel object with lenghtscale epsilon: k(x, y) = exp(-d(x, y)^2 / (2 * epsilon)) with d(x, y) = |.|_2</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.decompose-Tuple{AbstractMatrix{&lt;:Real}, Integer}" href="#Manyfold.decompose-Tuple{AbstractMatrix{&lt;:Real}, Integer}">#</a> <b><u>Manyfold.decompose</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">decompose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; skipfirst</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Decomposes the right/row stochastic matrix <code>P</code> into its eigenvalues and eigenvecors. Since <code>P</code> is stochastic the first eigenvalue is 1 and the first eigenvector is the trivial one, therefore we skip them.</p><p>We return a diagonal matrix Λs containing descending eigenvalues/singularvalues and corresponding columnwise ordered eigenvectors matrix Vs.</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.decompose_sym-Tuple{AbstractMatrix{&lt;:Real}, Integer}" href="#Manyfold.decompose_sym-Tuple{AbstractMatrix{&lt;:Real}, Integer}">#</a> <b><u>Manyfold.decompose_sym</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">decompose_sym</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; skipfirst</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:kry_eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Introduces a change of basis in order for symmetrification of the kernelmatrix <code>K</code>. The new matrix has the same eigenvalues</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.fit-Union{Tuple{T}, Tuple{S}, Tuple{Type{DiffusionMap}, AbstractMatrix{&lt;:T}, S}} where {S&lt;:KernelFunctions.Kernel, T&lt;:Real}" href="#Manyfold.fit-Union{Tuple{T}, Tuple{S}, Tuple{Type{DiffusionMap}, AbstractMatrix{&lt;:T}, S}} where {S&lt;:KernelFunctions.Kernel, T&lt;:Real}">#</a> <b><u>Manyfold.fit</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{DiffusionMap}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kernel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Kernel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Given data set <code>X</code> we compute diffusion map coordinates with a given kernelfunction <code>kernel</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Type{DiffusionMap}</code> : declares that we use Diffusion Maps to fit data</p></li><li><p><code>X</code> : data matrix, features represent rows, whereas columns represent different samples</p></li><li><p><code>kernel</code> : kernel function, that is used to produce kernel matrix</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>α=1.0</code> : density of points regulator. 0.0 -&gt; Graph Laplacian, 0.5 -&gt; Fokker Planck, 1.0 -&gt; Laplace Beltrami</p></li><li><p><code>d=2</code> : number of dimensions / eigenvectors that we would like to take into account (ordered by largest eigenvalues)</p></li><li><p><code>t=1</code> : timesteps of diffusion</p></li><li><p><code>alg=:kry_eigen</code> : eigen-/svdproblem solver. Options: <code>:eigen</code>, <code>:svd</code>, <code>:kry_eigen</code>, <code>:kry_svd</code></p></li><li><p><code>conj=false</code> : if true we symmetrize the kernel matrix by proper transformation and can use svd solver</p></li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.fit-Union{Tuple{T}, Tuple{S}, Tuple{Type{GeometricHarmonics}, AbstractMatrix{T}, AbstractMatrix{T}, S}} where {S&lt;:KernelFunctions.Kernel, T&lt;:Real}" href="#Manyfold.fit-Union{Tuple{T}, Tuple{S}, Tuple{Type{GeometricHarmonics}, AbstractMatrix{T}, AbstractMatrix{T}, S}} where {S&lt;:KernelFunctions.Kernel, T&lt;:Real}">#</a> <b><u>Manyfold.fit</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{GeometricHarmonics}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    X_train</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Y_train</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kernel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Creates GeometricHarmonics object, that is oriented to map from <code>X_train</code> to <code>Y_train</code>. Cann be used for Lifting and Restriction.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Type{GeometricHarmonics}</code> : declares that we want to create GeometricHarmonics object</p></li><li><p><code>X_train</code> : training data from the domain</p></li><li><p><code>Y_train</code> : training data of image(<code>X_train</code>)</p></li><li><p><code>kernel</code> : kernelfunction</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>d=10</code> : number of eigenvectors that we would like to take into account</p></li><li><p><code>alg=:eigen</code> : eigensolver backend. Options: <code>:eigen</code>, <code>:svd</code></p></li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.fit-Union{Tuple{T}, Tuple{Type{MultiScaleGeometricHarmonics}, AbstractMatrix{T}, AbstractMatrix{T}}} where T&lt;:Real" href="#Manyfold.fit-Union{Tuple{T}, Tuple{Type{MultiScaleGeometricHarmonics}, AbstractMatrix{T}, AbstractMatrix{T}}} where T&lt;:Real">#</a> <b><u>Manyfold.fit</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{MultiScaleGeometricHarmonics}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X_train</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Y_train</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    δ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ε_init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l_max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, μ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>TBW</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.normalize_to_handle_density!-Tuple{AbstractMatrix{&lt;:Real}}" href="#Manyfold.normalize_to_handle_density!-Tuple{AbstractMatrix{&lt;:Real}}">#</a> <b><u>Manyfold.normalize_to_handle_density!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">normalize_to_handle_density!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; α</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, symmetric</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>α = 0.0 .. density has biggest influence (Graph Laplacian) α = 0.5 .. Fokker Planck α = 1.0 .. density is taken care of (Laplace-Beltrami)</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.normalize_to_right_stochastic!-Tuple{AbstractMatrix{&lt;:Real}}" href="#Manyfold.normalize_to_right_stochastic!-Tuple{AbstractMatrix{&lt;:Real}}">#</a> <b><u>Manyfold.normalize_to_right_stochastic!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">normalize_to_right_stochastic!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Takes a kernel matrix <code>K</code> and normalizes the rows to sum up to 1. Therefore we can reinterpret the matrix as a Markovian Matrix, that is right stochastic.</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.predict-Union{Tuple{T}, Tuple{GeometricHarmonics, AbstractMatrix{T}}} where T&lt;:Real" href="#Manyfold.predict-Union{Tuple{T}, Tuple{GeometricHarmonics, AbstractMatrix{T}}} where T&lt;:Real">#</a> <b><u>Manyfold.predict</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">predict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GeometricHarmonics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X_oos)</span></span></code></pre></div><p>Uses the learned GeometricHarmonics model to fit new out of sample data X_oos to predict on Y_train living space.</p><p><strong>Arguments</strong></p><ul><li><p><code>GH</code> : already trained <code>GeometricHarmonics</code> object</p></li><li><p><code>X_oos</code> : out of sample new data set. Rows: features, Cols: samples</p></li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.preim_knn-Union{Tuple{T}, Tuple{S}, Tuple{DiffusionMap, AbstractMatrix{T}}} where {S&lt;:Integer, T&lt;:Real}" href="#Manyfold.preim_knn-Union{Tuple{T}, Tuple{S}, Tuple{DiffusionMap, AbstractMatrix{T}}} where {S&lt;:Integer, T&lt;:Real}">#</a> <b><u>Manyfold.preim_knn</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">preim_knn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiffusionMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Y_oos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Solves preimage problem for out of sample data set <code>Y_oos</code> in the diffusion map coordinates via k-nearest neighbor approach. This approach is for example used by <a href="https://arxiv.org/pdf/2112.15159" target="_blank" rel="noreferrer">Sandstede 2021</a> We handle this problem by an divide and conquer approach for readibility.</p><p><strong>Arguments</strong></p><ul><li><p><code>dmap</code> : Diffusion map object that was created beforehand with training data</p></li><li><p><code>Y_oos</code> : out of sample points in the latent space. Rows: Features, Cols: Samples</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>k=8</code> : number of nearest neighbors</p></li><li><p><code>alg=:arithmetic</code> : algorithm to get higher dimensional point. Options: <code>:arithmetic</code>, <code>:conv_hull</code></p></li><li><p><code>embed_dim</code> : If <code>Y_oos</code> is not defined on all dimensions of the diffusion map, i.e. &quot;[1 5] -&gt; <code>Y_oos</code>&quot; lives on first and fifth coordinate</p></li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.scurve" href="#Manyfold.scurve">#</a> <b><u>Manyfold.scurve</u></b> — <i>Function</i>. <p>scurve from ManifoldLearning.jl</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.swiss_roll" href="#Manyfold.swiss_roll">#</a> <b><u>Manyfold.swiss_roll</u></b> — <i>Function</i>. <p>Swiss roll from ManifoldLearning.jl</p><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Manyfold.transform-Union{Tuple{T}, Tuple{DiffusionMap, AbstractMatrix{T}}} where T&lt;:Real" href="#Manyfold.transform-Union{Tuple{T}, Tuple{DiffusionMap, AbstractMatrix{T}}} where T&lt;:Real">#</a> <b><u>Manyfold.transform</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiffusionMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X_oos</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Given out of sample data set <code>X_oos</code> we compute embedding <code>Y_oos</code> in the diffusion map coordinates by the Nystrom extension.</p><p><strong>Arguments</strong></p><ul><li><p><code>dmap</code> : Diffusion map object that was created beforehand with training data</p></li><li><p><code>X_oos</code> : oout of sample data set. Rows represent features, columns represent samples.</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><code>alg=:nystrom</code> : method to transform new out of sample data</li></ul><p><a href="https://github.com/HaneWall/Manyfold.jl" target="_blank" rel="noreferrer">source</a></p></div><br>`,34),n=[l];function r(o,p,d,h,k,c){return e(),s("div",null,n)}const y=i(t,[["render",r]]);export{u as __pageData,y as default};
